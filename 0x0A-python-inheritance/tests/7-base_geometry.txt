The ``7-base_geometry`` module
======================
Using ``BaseGeometry``
-------------------

    Import class from module:
    >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

    check module docstring:
    >>> a = __import__("7-base_geometry").__doc__
    >>> len(a) >= 1
    True

    check class docstring:
    >>> a = __import__("7-base_geometry").BaseGeometry.__doc__
    >>> len(a) >= 1
    True

    check method docstring:
    >>> a = __import__("7-base_geometry").BaseGeometry.area.__doc__
    >>> len(a) >= 1
    True

    >>> b = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
    >>> len(b) >= 1
    True


    >>> w = BaseGeometry()
    >>> w.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

    >>> w.integer_validator("age")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> w.integer_validator("age", 1)

    >>> w.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

    >>> w.integer_validator("age", -4)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

    >>> w.integer_validator("age", "4")
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> w.integer_validator("age", (4,))
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> w.integer_validator("age", [3])
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> w.integer_validator("age", True)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> w.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> w.integer_validator("age", None)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer